name: flow
on:
  workflow_call:
    inputs:
      config:
        type: string
        description: name of file containing config or config data itself
      config-format:
        type: string
        description: json or yaml, only specify when passing raw data in config input
      image:
        type: string
        required: true
      build-group:
        type: string
        default: ubuntu-latest
      registry-user:
        type: string
      debug:
        type: string
        default: dbg:*
    secrets:
      registry-pass: {}
    outputs:
      json:
        value: ${{ jobs.run.outputs.json }}

env:
  sock: /var/run/docker.sock
  pass: ${{ secrets.registry-pass }}
  out: out.json

jobs:
  run:
    runs-on: ${{ inputs.build-group }}
    outputs:
      json: ${{ steps.out.outputs.json }}
    steps:
      # if caller already called checkout, and this nested one creates undesirable latency
      # or other complications since i think it clears the working directory prior to checkout
      # it's possible to avoid this one here with use of cache at caller and uncache here,
      # but skipping that complexity for now...
      #
      - uses: actions/checkout@v3
      # login to setup creds registry, this will place creds in ~/.docker/config.json
      # so will need to share via volume to running container...
      #
      - run: echo ${pass} | docker login -u ${{ inputs.registry-user }} --password-stdin
        if: ${{ inputs.registry-user }}

      # required for called container to use docker
      #
      - run: sudo chmod o+rw ${sock}

      # run container with oci push logic
      #
      - run: |
          # single quotes required here when config is json
          #
          config='${{ inputs.config }}'
          format=${{ inputs.config-format }}
          #
          if [ -n "${config}" ]; then
            if [ -n "${format}" ]; then
              _config="-e CONFIGR_INPUT=${config} -e CONFIGR_FORMAT=${format}"
            else
              config=$(pwd)/${config}
              _config="-v ${config}:${config} -e CONFIGR_INPUT=${config}"
            fi
          fi
          #
          echo "_config=${_config}"
          #
          cmd="\
            docker run --rm \
            -u $(id -u) -e HOME=${HOME} \
            -v $(pwd):$(pwd) -w $(pwd) \
            -v /tmp:/tmp \
            ${_config} \
            -v ${sock}:${sock} \
            -e DEBUG=${{ inputs.debug }} \
            -e OUTPUT=${out} \
            ${{ inputs.image }} \
            "
          #
          echo "cmd=${cmd}"
          #
          ${cmd}

      - id: out
        run: |
          if [ -f ${out} ]; then
            key=json
            echo "output=${out} exists, placing in gha output at key=${key}"
            echo "${key}=$(cat ${out})" >> ${GITHUB_OUTPUT}
            cat ${GITHUB_OUTPUT}
          else
            echo "output=${out} not found, ignoring..."
          fi

      # docker logout to clean up creds for safe measure
      #
      - run: docker logout
        if: ${{ inputs.registry-user }}
