name: flow
on:
  workflow_call:
    inputs:
      config:
        type: string
        description: name of file containing config or config data itself
      config-format:
        type: string
        description: json or yaml, only specify when passing raw data in config input
      image:
        type: string
        required: true
      runs-on:
        type: string
        default: ubuntu-latest
      registry-user:
        type: string
      debug:
        type: string
        default: dbg:*
      is-checkout:
        type: boolean
        default: true
    secrets:
      registry-pass: {}
    outputs:
      json:
        value: ${{ jobs.run.outputs.json }}

env:
  sock: /var/run/docker.sock
  pass: ${{ secrets.registry-pass }}
  out: out.json
  sep: "-----"

jobs:
  run:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      json: ${{ steps.out.outputs.json }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: ${{ inputs.is-checkout }}

      # login to setup creds registry, this will place creds in ~/.docker/config.json
      # so will need to share via volume to running container...
      #
      - name: docker-login
        run: echo ${pass} | docker login -u ${{ inputs.registry-user }} --password-stdin
        if: ${{ inputs.registry-user }}

      # required for called container to use docker
      #
      - name: chmod-sock
        run: sudo chmod o+rw ${sock}

      # run container with oci push logic
      #
      - name: docker-run
        run: |
          # single quotes required here when config is json
          #
          config='${{ inputs.config }}'
          format=${{ inputs.config-format }}
          #
          if [ -n "${config}" ]; then
            if [ -n "${format}" ]; then
              _config="-e CONFIGR_INPUT=${config} -e CONFIGR_FORMAT=${format}"
            else
              config=$(pwd)/${config}
              _config="-v ${config}:${config} -e CONFIGR_INPUT=${config}"
            fi
          fi
          #
          # local volume folder
          #
          volDir=$(pwd)/../_vol
          mkdir -p ${volDir}
          cmd="ls -la ${volDir}"
          #
          echo ${sep}
          echo ${cmd}
          ${cmd}
          #
          # account for docker-creds
          #
          creds=config.json
          dockerDir=.docker
          credsPath=${HOME}/${dockerDir}/${creds}
          echo ${sep}
          if [ -f ${credsPath} ]; then
            echo "docker creds found passing to docker run"

            # entering grey area of breaking out of work dir with use of .. here
            # but trying to avoid placing info like creds in work dir to avoid accidental propagation
            #
            volCredsDir=${volDir}/home/${dockerDir}
            mkdir -p ${volCredsDir}
            cp ${credsPath} ${volCredsDir}
            volCreds=${volCredsDir}/${creds}
            ls -la ${volCreds}
            _creds="-e REGISTRY_CREDS=${volCreds} -v ${volCreds}:${credsPath}"
          else
            echo "docker creds not found"
          fi
          #
          # current strategy:
          # if is-checkout will use current-working-directory for work,
          # otherwise will mount empty folder for work
          #
          echo ${sep}
          if [ "${{ inputs.is-checkout }}" == "true" ]; then
            work=$(pwd)
            echo "is-checkout, setting work=${work}"
          else
            work=${volDir}/tmp/containr/work
            echo "is-not-checkout, setting work=${work}"
            # mkdir -p ${work}
          fi            
          _work="-w ${work} -e CONTAINR_WORK_HOST=${work} -v ${work}:/tmp/containr/work"

          #volRootDir=${volDir}/tmp/containr/work
          #mkdir -p ${volRootDir}
          #chmod 777 ${volRootDir}
          #
          #cmd="ls -la ${volRootDir}"
          #
          #echo ${sep}
          #echo ${cmd}
          #${cmd}
          #
          #work="-e CONTAINR_HOST_ROOT=${volRootDir} -v ${volRootDir}:/tmp/containr/work"
          #
          # finally, the docker-run command
          #
          cmd="\
            docker run --rm \
            -u $(id -u) -e HOME=${HOME} \
            ${_config} \
            ${_creds} \
            ${_work} \
            -v ${sock}:${sock} \
            -e DEBUG=${{ inputs.debug }} \
            -e OUTPUT=${out} \
            ${{ inputs.image }} \
            "
          #
          echo ${sep}
          echo "cmd=${cmd}"
          ${cmd}

      - name: output
        id: out
        run: |
          if [ -f ${out} ]; then
            key=json
            echo "output=${out} exists, placing in gha output at key=${key}"
            echo "${key}=$(cat ${out})" >> ${GITHUB_OUTPUT}
            cat ${GITHUB_OUTPUT}
          else
            echo "output=${out} not found, ignoring..."
          fi

      # docker logout to clean up creds for safe measure
      #
      - name: docker-logout
        run: docker logout
        if: ${{ inputs.registry-user }}
