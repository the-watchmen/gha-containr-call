name: flow
on:
  workflow_call:
    inputs:
      config:
        type: string
        description: name of file containing config or config data itself
      config-format:
        type: string
        description: json or yaml, only specify when passing raw data in config input
      image:
        type: string
        required: true
      runs-on:
        type: string
        default: ubuntu-latest
      registry-user:
        type: string
      debug:
        type: string
        default: dbg:*
      is-checkout:
        type: boolean
        default: true
    secrets:
      registry-pass: {}
    outputs:
      json:
        value: ${{ jobs.run.outputs.json }}

env:
  sock: /var/run/docker.sock
  pass: ${{ secrets.registry-pass }}
  out: out.json
  sep: "-----"

jobs:
  run:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      json: ${{ steps.out.outputs.json }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: ${{ inputs.is-checkout }}

      # login to setup creds registry, this will place creds in ~/.docker/config.json
      # so will need to share via volume to running container...
      #
      - name: docker-login
        run: echo ${pass} | docker login -u ${{ inputs.registry-user }} --password-stdin
        if: ${{ inputs.registry-user }}

      # required for called container to use docker
      #
      - name: chmod-sock
        run: sudo chmod o+rw ${sock}

      # run container with oci push logic
      #
      - name: docker-run
        run: |
          #####
          #
          # vars for host (h) and container (c) volume mounts
          #
          cRoot=/tmp/containr
          cWork=${cRoot}/work
          cIo=${cRoot}/io
          #
          hRoot=$(pwd)
          hVol=${hRoot}/../_vol
          mkdir -p ${hVol}
          echo ${sep}
          echo "set up host volume folder=${hVol}"
          ls -la ${hVol}
          #
          # strategy:
          # if is-checkout will use current-working-directory for work,
          # otherwise will mount empty folder for work
          #
          echo ${sep}
          if [ "${{ inputs.is-checkout }}" = 'true' ]; then
            hWork=${hRoot}
            echo "using cwd=${hWork} as work"
            isCwdWork=1
          else
            hWork=${hVol}/work
            mkdir -p ${hWork}
            echo "using new folder=${hWork} as work"
          fi
          ls -la ${hWork}
          #
          #####
          #
          # single quotes required here when config is json
          #
          config='${{ inputs.config }}'
          format=${{ inputs.config-format }}
          #
          if [ -n "${config}" ]; then
            if [ -n "${format}" ]; then
              # using variable for config (eg json) v file so no mounts required
              #
              _config="-e CONFIGR_INPUT=${config} -e CONFIGR_FORMAT=${format}"
            else
              hConfig=${hRoot}/${config}
              cConfig=${cIo}/${config}
              _config="-v ${hConfig}:${cConfig} -e CONFIGR_INPUT=${cConfig}"
            fi
          fi
          #
          # account for docker-creds
          #
          creds=config.json
          dockerDir=.docker
          credsPath=${HOME}/${dockerDir}/${creds}
          echo ${sep}
          if [ -f ${credsPath} ]; then
            echo "docker creds found passing to docker run"
            hCredsDir=${hVol}/home/${dockerDir}
            mkdir -p ${hCredsDir}
            cp ${credsPath} ${hCredsDir}
            hCreds=${hCredsDir}/${creds}
            ls -la ${hCreds}
            _creds="-e REGISTRY_CREDS=${hCreds} -v ${hCreds}:${credsPath}"
          else
            echo "docker creds not found"
          fi
          #
          # volume mounts for work
          #
          _work="-w ${cWork} -e CONTAINR_WORK_HOST=${hWork} -v ${hWork}:${cWork}"
          #
          # finally, the docker-run command
          #
          cmd="\
            docker run --rm \
            -u $(id -u) -e HOME=${HOME} \
            ${_config} \
            ${_creds} \
            ${_work} \
            -v ${sock}:${sock} \
            -e DEBUG=${{ inputs.debug }} \
            -e OUTPUT=${out} \
            ${{ inputs.image }} \
            "
          #
          echo ${sep}
          echo "cmd=${cmd}"
          ${cmd}

      - name: output
        id: out
        run: |
          if [ -f ${out} ]; then
            key=json
            echo "output=${out} exists, placing in gha output at key=${key}"
            echo "${key}=$(cat ${out})" >> ${GITHUB_OUTPUT}
            cat ${GITHUB_OUTPUT}
          else
            echo "output=${out} not found, ignoring..."
          fi

      # docker logout to clean up creds for safe measure
      #
      - name: docker-logout
        run: docker logout
        if: ${{ inputs.registry-user }}
